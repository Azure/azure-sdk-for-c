@startuml RPC_SERVER

state RpcServer {

  state Waiting
  Waiting : <b>MQTT_PUB_RECV_IND(of correct topic)/</b> ^RPC_SERVER_EXECUTE_COMMAND_REQ
  Waiting : <b>RPC_SERVER_EXECUTE_COMMAND_RESP(success, error)/</b>  if (topic matches subscription)\n\t\t^MQTT_PUB_REQ()
  Waiting : <b>rpc_server_register_request/</b> start sub timer, ^MQTT_SUB_REQ(...)
  Waiting : <b>MQTT_EVENT_SUBACK_RSP(of correct id)/</b> stop sub timer
  Waiting : <b>MQTT_SESSION_EXPIRY/</b> start sub timer, ^MQTT_SUB_REQ(...)

  state Faulted

  [*] -> Waiting
  Waiting --> Faulted : <b>HFSM_TIMEOUT/</b> ^AZ_ERROR_HFSM_INVALID_STATE
}

RpcServer : <b>Any outbound non-RPC_SERVER Event/</b> ignore
RpcServer : <b>MQTT_EVENT_PUBACK_RSP/</b> ignore
RpcServer : <b>HFSM_EVENT_ERROR/</b> ^platform_critical_error

@enduml
