parameters:
  LiveTestSamples: []

jobs:
  - job: LiveTest
    strategy:
      matrix:
        Linux_x64_with_samples:
          vm.image: 'ubuntu-18.04'
          vcpkg.deps: 'curl[ssl]'
          VCPKG_DEFAULT_TRIPLET: 'x64-linux'
          build.args: ' -DTRANSPORT_CURL=ON'
        Win_x86_with_samples:
          vm.image: 'windows-2019'
          vcpkg.deps: 'curl[winssl]'
          VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
          CMAKE_GENERATOR: 'Visual Studio 16 2019'
          CMAKE_GENERATOR_PLATFORM: Win32
          build.args: ' -DTRANSPORT_CURL=ON'
        Win_x64_with_samples:
          vm.image: 'windows-2019'
          vcpkg.deps: 'curl[winssl]'
          VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
          CMAKE_GENERATOR: 'Visual Studio 16 2019'
          CMAKE_GENERATOR_PLATFORM: x64
          build.args: ' -DTRANSPORT_CURL=ON'
        MacOS_x64_with_samples:
          vm.image: 'macOS-10.15'
          vcpkg.deps: 'curl[ssl]'
          VCPKG_DEFAULT_TRIPLET: 'x64-osx'
          build.args: ' -DTRANSPORT_CURL=ON'

    pool:
      vmImage: $(vm.image)

    steps:
      # Mac OS specific requirements
      - task: Bash@3
        inputs:
          targetType: inline
          script: |
            sudo xcode-select --switch /Applications/Xcode_11.3.1.app
            echo "xcode path:"
            sudo xcode-select --print-path

            # Install gcc 9
            brew install gcc@9
            gcc --version

            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
            git rev-parse --verify HEAD
            git status

            ./bootstrap-vcpkg.sh

            # Validate that vcpkg bootstrap succeeded
            ./vcpkg version
            if [ $? -ne 0 ]
            then
              echo "./bootstrap-vcpkg.sh FAILED"
              exit 1
            fi

            echo "##vso[task.prependpath]$(pwd)"
            echo "##vso[task.setvariable variable=VCPKG_INSTALLATION_ROOT;]$(pwd)"

        # Execute only for Mac and if there is at least one dependency to be installed
        condition: and(succeeded(), contains(variables['vm.image'], 'macOS'), not(eq(variables['vcpkg.deps'], '')))
        displayName: vcpkg bootstrap

      - script: |
          vcpkg install $(vcpkg.deps)
        displayName: vcpkg install dependencies
        # Execute only if there is at least one dependency to be installed
        condition: and(succeeded(), not(eq(variables['vcpkg.deps'], '')))

      - task: CMake@1
        inputs:
          cmakeArgs: --version
        displayName: cmake version
      - task: CMake@1
        inputs:
          cmakeArgs: $(build.args) ..
        displayName: cmake generate
      - task: CMake@1
        inputs:
          cmakeArgs: --build .
        displayName: cmake build

      - template: /eng/common/TestResources/deploy-test-resources.yml
        parameters:
          ServiceDirectory: '.'

      # Run live tests
      - ${{ each sample in parameters.LiveTestSamples }}:
        - script: ${{ sample.LinuxMacPath }}
          displayName: Live Test ${{ sample.Name }} (Non-Windows)
          condition: not(contains(variables['vm.image'], 'windows'))

        - script: ${{ sample.WindowsPath }}
          displayName: Live Test ${{ sample.Name }} (Windows)
          condition: contains(variables['vm.image'], 'windows')


      - template: /eng/common/TestResources/remove-test-resources.yml
        parameters:
          ServiceDirectory: '.'