parameters:
  LiveTestSamples: []

jobs:
  - job: LiveTest
    condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
    strategy:
      matrix:
        Linux_x64_with_iot_samples:
          Pool: azsdk-pool-mms-ubuntu-1804-general
          OSVmImage: MMSUbuntu18.04
          _PREVIEW_VSTS_DOCKER_IMAGE: "aziotbld/embedded-sdk-c-1804"
          vcpkg.deps: 'cmocka paho-mqtt'
          VCPKG_DEFAULT_TRIPLET: 'x64-linux'
          build.args: ' -DTRANSPORT_PAHO=ON'
          test_type: 'iot'
        Win_x64_with_iot_samples:
          Pool: azsdk-pool-mms-win-2019-general
          OSVmImage: MMS2019
          vcpkg.deps: 'curl[winssl] cmocka paho-mqtt'
          VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
          CMAKE_GENERATOR: 'Visual Studio 16 2019'
          CMAKE_GENERATOR_PLATFORM: x64
          build.args: ' -DTRANSPORT_PAHO=ON'
          test_type: 'iot'
        Linux_x64_with_samples:
          Pool: azsdk-pool-mms-ubuntu-1804-general
          OSVmImage: MMSUbuntu18.04
          vcpkg.deps: 'curl[ssl]'
          VCPKG_DEFAULT_TRIPLET: 'x64-linux'
          build.args: ' -DTRANSPORT_CURL=ON -DAZ_PLATFORM_IMPL=POSIX'
        Win_x86_with_samples:
          Pool: azsdk-pool-mms-win-2019-general
          OSVmImage: MMS2019
          vcpkg.deps: 'curl[winssl]'
          VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
          CMAKE_GENERATOR: 'Visual Studio 16 2019'
          CMAKE_GENERATOR_PLATFORM: Win32
          build.args: ' -DTRANSPORT_CURL=ON -DAZ_PLATFORM_IMPL=WIN32'
        Win_x64_with_samples:
          Pool: azsdk-pool-mms-win-2019-general
          OSVmImage: MMS2019
          vcpkg.deps: 'curl[winssl]'
          VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
          CMAKE_GENERATOR: 'Visual Studio 16 2019'
          CMAKE_GENERATOR_PLATFORM: x64
          build.args: ' -DTRANSPORT_CURL=ON -DAZ_PLATFORM_IMPL=WIN32'
        MacOS_x64_with_samples:
          Pool: Azure Pipelines
          OSVmImage: 'macOS-10.15'
          vcpkg.deps: 'curl[ssl]'
          VCPKG_DEFAULT_TRIPLET: 'x64-osx'
          build.args: ' -DTRANSPORT_CURL=ON  -DAZ_PLATFORM_IMPL=POSIX'

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    steps:
      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
        parameters:
          AgentImage: $(OSVmImage)

      - template: /eng/pipelines/templates/steps/vcpkg.yml
        parameters:
          DependenciesVariableName: vcpkg.deps

      - pwsh: |
           Write-Host ("Powershell Module Path:" + $Env:PSModulePath)
           Get-Module -ListAvailable
           Write-Host "##vso[task.setvariable variable=VCPKG_ROOT]$(Build.SourcesDirectory)/vcpkg"
        displayName: "List available Powershell Modules"

      - ${{ if eq(variables['test_type'], 'iot') }}:
        - template: /eng/common/TestResources/deploy-test-resources.yml
          parameters:
            ServiceDirectory: '.'

      - pwsh: |
           Write-Host "##vso[task.setvariable variable=VCPKG_ROOT]$(Build.SourcesDirectory)/vcpkg"
        displayName: "List VCPKG env vars"

      - template: /eng/pipelines/templates/steps/cmake-build.yml
        parameters:
          BuildArgs: $(build.args)

      # Run live tests
      - ${{ each sample in parameters.IoTLiveTestSamples }}:
        - script: ${{ sample.NonWindowsPath }}
          displayName: Live Test ${{ sample.Name }} (Non-Windows)
          condition: and(contains(variables['OSVmImage'], 'Ubuntu'), eq(variables['test_type'], 'iot'))

        - script: ${{ sample.WindowsPath }}
          displayName: Live Test ${{ sample.Name }} (Windows)
          condition: and(not(contains(variables['OSVmImage'], 'Ubuntu')), eq(variables['test_type'], 'iot'))

      - ${{ if eq(variables['test_type'], 'iot') }}:
        - template: /eng/common/TestResources/remove-test-resources.yml
          parameters:
            ServiceDirectory: '.'
