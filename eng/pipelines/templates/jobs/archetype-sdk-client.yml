jobs:
- job: Validate
  strategy:
    matrix:
      # Build with no dependencies at all (No samples)
      Linux_x64:
        vm.image: 'ubuntu-18.04'
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
      Win_x86:
        vm.image: 'windows-2019'
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
      Win_x64:
        vm.image: 'windows-2019'
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
      MacOS_x64:
        vm.image: 'macOS-10.14'
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        
      # Build with sample dependencies [curl for transport]
      Linux_x64_with_samples:
        vm.image: 'ubuntu-18.04'
        vcpkg.deps: 'curl[ssl]'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=POSIX'
      Win_x86_with_samples:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=WIN32'
      Win_x64_with_samples:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=WIN32'
      MacOS_x64_with_samples:
        vm.image: 'macOS-10.14'
        vcpkg.deps: 'curl[ssl]'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=POSIX'

      # Build with sample dependencies and unit testing [curl for transport and cmoka]
      Linux_x64_with_samples_and_unit_test:
        vm.image: 'ubuntu-18.04'
        vcpkg.deps: 'curl[ssl] cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=POSIX -DUNIT_TESTING=ON'
      Win_x86_with_samples_and_unit_test:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl] cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=WIN32 -DUNIT_TESTING=ON'
      Win_x64_with_samples_and_unit_test:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl] cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=WIN32 -DUNIT_TESTING=ON'
      MacOS_x64_with_samples_and_unit_test:
        vm.image: 'macOS-10.14'
        vcpkg.deps: 'curl[ssl] cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: ' -DBUILD_CURL_TRANSPORT=ON -DAZ_PLATFORM_IMPL=POSIX -DUNIT_TESTING=ON'
      
      # Build with unit testing only. No samples [cmoka]
      Linux_x64_with_unit_test:
        vm.image: 'ubuntu-18.04'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DUNIT_TESTING=ON -DCMAKE_BUILD_TYPE=Debug'
        AZ_SDK_CODE_COV: 1
      Win_x86_with_unit_test:
        vm.image: 'windows-2019'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DUNIT_TESTING=ON'
      Win_x64_with_unit_test:
        vm.image: 'windows-2019'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DUNIT_TESTING=ON'
      MacOS_x64_with_unit_test:
        vm.image: 'macOS-10.14'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: ' -DUNIT_TESTING=ON'
  pool:
    vmImage: $(vm.image)
  variables:
    CMOCKA_XML_FILE: "%g-test-results.xml"
    CMOCKA_MESSAGE_OUTPUT: "xml"

  steps:
  - checkout: self
    submodules: recursive

  # Mac OS specific requirements
  - task: Bash@3
    inputs:
      targetType: inline
      script: |
        sudo xcode-select --switch /Applications/Xcode_9.4.1.app
        echo "xcode path:"
        sudo xcode-select --print-path

        # Expect failure:
        brew install gcc
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh

        # Validate that vcpkg bootstrap succeeded
        ./vcpkg version
        if [ $? -ne 0 ]
        then
          echo "./bootstrap-vcpkg.sh FAILED"
          exit 1
        fi

        echo "##vso[task.prependpath]$(pwd)"
        echo "##vso[task.setvariable variable=VCPKG_INSTALLATION_ROOT;]$(pwd)"

    # Execute only for Mac and if there is at least one dependency to be installed
    condition: and(succeeded(), contains(variables['vm.image'], 'macOS'), not(eq(variables['vcpkg.deps'], '')))
    displayName: vcpkg bootstrap


  - script: |
      vcpkg install $(vcpkg.deps)
    displayName: vcpkg install dependencies
    # Execute only if there is at least one dependency to be installed
    condition: and(succeeded(), not(eq(variables['vcpkg.deps'], '')))

  - script: |
      sudo apt install -y gcovr lcov
      dotnet tool install -g dotnet-reportgenerator-globaltool
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
    displayName: Install coverage tools
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)

  - task: CMake@1
    inputs:
      cmakeArgs: --version
    displayName: cmake version
  - task: CMake@1
    inputs:
      cmakeArgs: $(build.args) ..
    displayName: cmake generate
  - task: CMake@1
    inputs:
      cmakeArgs: --build .
    displayName: cmake build
  - script: |
      ctest -C Debug
    workingDirectory: build
    displayName: ctest
  # Publish Test Results
  # Publish test results to Azure Pipelines
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/*-test-results.xml'
      mergeTestResults: true
      testRunTitle: 'C99 - $(Agent.JobName)'
    condition: contains(variables['vcpkg.deps'], 'cmocka')

  - script: |
      make az_core_cov_xml
      make az_iot_cov_xml
      make az_keyvault_cov_xml
      make az_storage_blobs_cov_xml
      ../tools/reportgenerator "-reports:sdk/*/*/*cov_xml.xml" "-targetdir:." "-reporttypes:Cobertura"
    workingDirectory: build
    displayName: Generate Code Coverage Data
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)

  - task: PublishCodeCoverageResults@1
    inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/**/Cobertura.xml'
    displayName: Publish Code Coverage to DevOps
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)