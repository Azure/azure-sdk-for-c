# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: MIT

# +----+--------------------+---------+---------------+-----------+---------+------------+-------+---------+---------------+--------+
# | ## | OS/arch/compiler   | Release | Preconditions | Map files | Logging | Unit tests | Mocks | Samples | Code coverage | Linter |
# +----+--------------------+---------+---------------+-----------+---------+------------+-------+---------+---------------+--------+
# |  1 | Linux ARM          |    +    |               |           |    +    |     N/A    |       |   N/A   |               |        |
# |  2 | Linux ARM          |         |               |           |         |     N/A    |       |   N/A   |               |        |
# |  3 | Linux (x64)        |    +    |               |     +     |    +    |      +     |   +   |    +    |               |        |
# |  4 | Linux (x64)        |         |               |           |    +    |      +     |   +   |    +    |               |        |
# |  5 | Windows x86        |    +    |               |     +     |         |      +     |       |         |               |        |
# |  6 | MacOS (x64)        |    +    |               |     +     |    +    |      +     |       |    +    |               |        |
# |  7 | MacOS (x64)        |         |               |           |    +    |      +     |       |    +    |               |        |
# |  8 | Linux ARM          |    +    |       +       |           |         |     N/A    |       |   N/A   |               |        |
# |  9 | Linux ARM          |         |       +       |           |    +    |     N/A    |       |   N/A   |               |        |
# | 10 | Linux (x64)        |    +    |       +       |           |    +    |      +     |   +   |    +    |               |        |
# | 11 | Linux (x64)        |         |       +       |           |    +    |      +     |   +   |         |       +       |   +    |
# | 12 | Windows x64        |         |       +       |           |         |      +     |       |    +    |               |        |
# | 13 | Windows x64        |         |       +       |           |         |      +     |       |    +    |               |        |
# | 14 | MacOS (x64)        |    +    |       +       |           |    +    |      +     |       |    +    |               |        |
# | 15 | MacOS (x64)        |         |       +       |           |    +    |      +     |       |         |               |        |
# | 16 | Windows x64        |    +    |               |     +     |         |            |       |    +    |               |        |
# | 17 | Linux (x64) GCC 11 |    +    |               |     +     |         |      +     |       |         |               |        |
# |               G     E     N     E     R     A     T     E           A     R     T     I     F     A     C     T     S           |
# +----+--------------------+---------+---------------+-----------+---------+------------+-------+---------+---------------+--------+
#
# ATTENTION: We should not enable code coverage for Release configurations.
#      They produce low numbers, and are basically unactionable, plus the error message they produce in this case is confusing.
#
# N/A - There's no libcurl, cmocka, or paho-mqtt on Linux ARM, so no unit tests or samples can be built.
#

parameters:
  BuildReleaseArtifacts: true

jobs:
- job: Validate_Linux
  displayName: Validate
  condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
  strategy:
    matrix:
      LinuxARM_Release_Logging:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        AptDependencies: 'gcc-arm-none-eabi'
        build.args: '-DCMAKE_TOOLCHAIN_FILE=cmake-modules/gcc-arm-toolchain.cmake -DPRECONDITIONS=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'false'
        BuildType: Release

      LinuxARM:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        AptDependencies: 'gcc-arm-none-eabi'
        build.args: '-DCMAKE_TOOLCHAIN_FILE=cmake-modules/gcc-arm-toolchain.cmake -DPRECONDITIONS=OFF -DLOGGING=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'false'
        BuildType: Debug

      Linux_Release_MapFiles_Logging_UnitTests_Mocks_Samples:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: 'cmocka paho-mqtt'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: '-DPRECONDITIONS=OFF -DUNIT_TESTING=ON -DUNIT_TESTING_MOCKS=ON -DTRANSPORT_PAHO=ON -DADDRESS_SANITIZER=ON'
        PublishMapFiles: 'true'
        MapFileArtifactSuffix: 'lnx-x64-rel-noprc-log-samples'
        BuildType: Release

      Linux_Logging_UnitTests_Mocks_Samples:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: '-DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DPRECONDITIONS=OFF -DUNIT_TESTING=ON -DADDRESS_SANITIZER=ON -DUNIT_TESTING_MOCKS=ON'
        PublishMapFiles: 'false'
        BuildType: Debug

      LinuxARM_Release_Preconditions:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        AptDependencies: 'gcc-arm-none-eabi'
        build.args: '-DCMAKE_TOOLCHAIN_FILE=cmake-modules/gcc-arm-toolchain.cmake -DLOGGING=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'false'
        BuildType: Release

      LinuxARM_Preconditions_Logging:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        AptDependencies: 'gcc-arm-none-eabi'
        build.args: '-DCMAKE_TOOLCHAIN_FILE=cmake-modules/gcc-arm-toolchain.cmake'
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'false'
        BuildType: Debug

      Linux_Release_Preconditions_Logging_UnitTests_Mocks_Samples:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: '-DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DUNIT_TESTING=ON -DUNIT_TESTING_MOCKS=ON'
        PublishMapFiles: 'false'
        BuildType: Release

      Linux_Preconditions_Logging_UnitTests_Mocks_CodeCov_Linter:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: azsdk-pool-mms-ubuntu-2004-1espt
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        AptDependencies: 'gcovr lcov clang-format-9'
        build.args: '-DUNIT_TESTING=ON -DUNIT_TESTING_MOCKS=ON'
        AZ_SDK_CODE_COV: 1
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'false'
        BuildType: Debug

      LinuxGCC11_Release_MapFiles_UnitTests:
        Pool: azsdk-pool-mms-ubuntu-2204-general
        OSVmImage: azsdk-pool-mms-ubuntu-2204-1espt
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: '-DPRECONDITIONS=OFF -DUNIT_TESTING=ON -DLOGGING=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'true'
        MapFileArtifactSuffix: 'lnx-gcc11-rel-noprc-nolog'
        CC: '/usr/bin/gcc-11'
        BuildType: Release

  pool:
    name: $(Pool)
    image: $(OSVmImage)
    os: linux

  variables:
    - template: /eng/pipelines/templates/variables/image.yml
    - name: CMOCKA_XML_FILE
      value: "%g-test-results.xml"
    - name: CMOCKA_MESSAGE_OUTPUT
      value: "xml"

  steps:
    - template: /eng/pipelines/templates/steps/ci.test.yml
      parameters:
        OSName: 'linux'

- job: Validate_Windows
  displayName: Validate
  condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
  strategy:
    matrix:
      Windows_VS2022_X86_Release_MapFiles_UnitTests:
        Pool: azsdk-pool-mms-win-2022-general
        OSVmImage: azsdk-pool-mms-win-2022-1espt
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        build.args: '-DPRECONDITIONS=OFF -DUNIT_TESTING=ON -DLOGGING=OFF -DADDRESS_SANITIZER=OFF'
        CMAKE_GENERATOR: 'Visual Studio 17 2022'
        CMAKE_GENERATOR_PLATFORM: Win32
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'true'
        MapFileArtifactSuffix: 'win-x86-rel-noprc-nolog'
        BuildType: Release

      Windows2019_Preconditions_UnitTests_Samples:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: azsdk-pool-mms-win-2019-1espt
        vcpkg.deps: 'curl[winssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        build.args: '-DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=WIN32 -DUNIT_TESTING=ON -DLOGGING=OFF -DADDRESS_SANITIZER=ON'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        PublishMapFiles: 'false'
        BuildType: Debug

      Windows2022_Preconditions_UnitTests_Samples:
        Pool: azsdk-pool-mms-win-2022-general
        OSVmImage: azsdk-pool-mms-win-2022-1espt
        vcpkg.deps: 'curl[winssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        build.args: '-DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=WIN32 -DUNIT_TESTING=ON -DLOGGING=OFF -DADDRESS_SANITIZER=OFF'
        CMAKE_GENERATOR: 'Visual Studio 17 2022'
        CMAKE_GENERATOR_PLATFORM: x64
        PublishMapFiles: 'false'
        BuildType: Debug

      Windows_Release_Samples_MapFiles:
        Pool: azsdk-pool-mms-win-2022-general
        OSVmImage: azsdk-pool-mms-win-2022-1espt
        vcpkg.deps: 'paho-mqtt'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        build.args: '-DPRECONDITIONS=OFF -DLOGGING=OFF -DTRANSPORT_PAHO=ON'
        CMAKE_GENERATOR: 'Visual Studio 17 2022'
        CMAKE_GENERATOR_PLATFORM: x64
        PublishMapFiles: 'true'
        MapFileArtifactSuffix: 'win-x64-rel-noprc-nolog-samples'
        BuildType: Release
  pool:
    name: $(Pool)
    image: $(OSVmImage)
    os: windows

  variables:
    - template: /eng/pipelines/templates/variables/image.yml
    - name: CMOCKA_XML_FILE
      value: "%g-test-results.xml"
    - name: CMOCKA_MESSAGE_OUTPUT
      value: "xml"

  steps:
    - template: /eng/pipelines/templates/steps/ci.test.yml
      parameters:
        OSName: 'windows'

- job: Validate_MacOS
  displayName: Validate
  condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
  strategy:
    matrix:
      MacOS_Release_MapFiles_Logging_UnitTests_Samples:
        Pool: Azure Pipelines
        OSVmImage: 'macos-latest'
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: '-DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DPRECONDITIONS=OFF -DUNIT_TESTING=ON'
        MapFileArtifactSuffix: 'mac-rel-noprc-log-samples'
        BuildType: Release

      MacOS_Logging_UnitTests_Samples:
        Pool: Azure Pipelines
        OSVmImage: 'macos-latest'
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: '-DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DPRECONDITIONS=OFF -DUNIT_TESTING=ON'
        PublishMapFiles: 'false'
        BuildType: Debug

      MacOS_Release_Preconditions_Logging_UnitTests_Samples:
        Pool: Azure Pipelines
        OSVmImage: 'macos-latest'
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: '-DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DUNIT_TESTING=ON'
        PublishMapFiles: 'false'
        BuildType: Release

      MacOS_Preconditions_Logging_UnitTests:
        Pool: Azure Pipelines
        OSVmImage: 'macos-latest'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: '-DUNIT_TESTING=ON'
        AZ_SDK_C_NO_SAMPLES: 'true'
        PublishMapFiles: 'false'
        BuildType: Debug

  pool:
    name: $(Pool)
    vmImage: $(OSVmImage)
    os: macOS
  variables:
    CMOCKA_XML_FILE: "%g-test-results.xml"
    CMOCKA_MESSAGE_OUTPUT: "xml"

  steps:
    - template: /eng/pipelines/templates/steps/ci.test.yml
      parameters:
        OSName: 'macOS'

- job: GenerateReleaseArtifacts
  pool:
    name: $(WINDOWSPOOL)
    image: $(WINDOWSVMIMAGE)
    os: windows
  variables:
    - name: Package.EnableSBOMSigning
      value: false

  steps:
    - template: /eng/common/pipelines/templates/steps/check-spelling.yml

    - template: /eng/common/pipelines/templates/steps/verify-links.yml
      parameters:
        Directory: ''
        CheckLinkGuidance: $true

    # Generate release-info
    - pwsh: >-
        New-Item
        -ItemType directory
        -Path $(Build.ArtifactStagingDirectory)
        -Name release-info
      displayName: Create package info artifact location

    - pwsh: |
        $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) release-info/package-info.json
        $version = eng/scripts/Get-SdkVersion.ps1
        $outputObject = @{ version = $version.ToString(); name = 'Azure SDK for Embedded C' } | ConvertTo-Json

        Set-Content -Path $outputPath -Value $outputObject

        # Set AZURE_SDK_VERSION for use in Doxygen generation
        Write-Host "##vso[task.setvariable variable=AZURE_SDK_VERSION]$version"
      displayName: Create package info JSON file

    - pwsh: >-
        Copy-Item
        CHANGELOG.md
        (Join-Path $(Build.ArtifactStagingDirectory) release-info/CHANGELOG.md)
      displayName: Copy CHANGELOG.md to package artifact output

    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactName: release-info
        ArtifactPath: $(Build.ArtifactStagingDirectory)/release-info

    # Generate Documentation
    - pwsh: |
        $setupFile="doxygen-1.8.20-setup.exe";

        Invoke-WebRequest `
          -MaximumRetryCount 10 `
          -Uri "https://azuresdktooling.blob.core.windows.net/dependencies/$setupFile" `
          -OutFile $setupFile `
        | Wait-Process;

        Start-Process -Filepath .\$setupFile -ArgumentList @("/VERYSILENT") -Wait
      workingDirectory: $(Agent.TempDirectory)
      displayName: Download and Install Doxygen

      # Assumes AZURE_SDK_VERSION is set in the environment
      # If doxygen produces any warnings, fail the step.
    - pwsh: |
        Invoke-Expression "& `"C:\Program Files\doxygen\bin\doxygen.exe`" doc\Doxyfile"
        if (Test-Path "DoxygenWarningLog.txt" -PathType leaf)
        {
          $LogContent = Get-Content "DoxygenWarningLog.txt"

          Remove-Item "DoxygenWarningLog.txt"

          If ($LogContent -ne $Null)
          {
            Write-Output $LogContent
            Write-Error "Warnings from the doxygen docs generation step are treated as error."
            exit 1
          }
        }
      displayName: Generate docs

    - task: PowerShell@2
      inputs:
        targetType: filePath
        filePath: eng/scripts/New-DocsMsArtifact.ps1
        ignoreLASTEXITCODE: flattenFolders
        pwsh: true
        errorActionPreference: stop

      displayName: Generate artifacts for docs.ms

    - pwsh: |
        New-Item -ItemType directory -Path $(Build.ArtifactStagingDirectory) -Name docs
        New-Item -ItemType directory -Path $(Build.ArtifactStagingDirectory) -Name docs.ms
      displayName: Create doc artifact location

    - task: CopyFiles@2
      inputs:
        sourceFolder: doc/generated_doxygen_docs/html
        targetFolder: $(Build.ArtifactStagingDirectory)/docs
      displayName: Copy documentation for publishing on GitHub.io

    - task: CopyFiles@2
      inputs:
        sourceFolder: doc/generated_doxygen_docs/docs.ms
        targetFolder: $(Build.ArtifactStagingDirectory)/docs.ms
      displayName: Copy documentation for publishing on docs.ms

    - pwsh: |
        $packageInfoPath = Join-Path -Path $(Build.ArtifactStagingDirectory) release-info/package-info.json
        Copy-Item -Path $packageInfoPath -Destination $(Join-Path -Path $(Build.ArtifactStagingDirectory) /docs/package-info.json)
      displayName: Copy package-info.json to documentation path

    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactName: docs
        ArtifactPath: $(Build.ArtifactStagingDirectory)/docs

    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactName: docs.ms
        ArtifactPath: $(Build.ArtifactStagingDirectory)/docs.ms

    - template: /eng/common/pipelines/templates/steps/eng-common-workflow-enforcer.yml
