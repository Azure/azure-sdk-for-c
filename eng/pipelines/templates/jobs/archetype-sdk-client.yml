parameters:
  BuildReleaseArtifacts: true

jobs:
- job: Validate
  condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
  strategy:
    matrix:
      # Build with no dependencies at all (No samples) - PRECONDITIONS ON
      # WARNINGS_AS_ERRORS          ON
      # TRANSPORT_CURL              OFF
      # UNIT_TESTING                OFF
      # UNIT_TESTING_MOCKS          OFF
      # TRANSPORT_PAHO              OFF
      # PRECONDITIONS               ON
      # LOGGING                     ON
      # AZ_PLATFORM_IMPL            AZ_PLATFORM_IMPL_NONE
      Linux_x64:
        OSVmImage: 'ubuntu-18.04'
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        AZ_SDK_C_NO_SAMPLES: 'true'
      Win_x86:
        OSVmImage: 'windows-2019'
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        AZ_SDK_C_NO_SAMPLES: 'true'
      Win_x64:
        OSVmImage: 'windows-2019'
        vcpkg.deps: ''
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        AZ_SDK_C_NO_SAMPLES: 'true'
      MacOS_x64:
       OSVmImage: 'macOS-10.15'
       vcpkg.deps: ''
       VCPKG_DEFAULT_TRIPLET: 'x64-osx'
       AZ_SDK_C_NO_SAMPLES: 'true'

      # Build with sample dependencies [curl for transport] - PRECONDITIONS ON
      # WARNINGS_AS_ERRORS          ON
      # TRANSPORT_CURL              ON
      # UNIT_TESTING                OFF
      # UNIT_TESTING_MOCKS          OFF
      # TRANSPORT_PAHO              ON
      # PRECONDITIONS               ON
      # LOGGING                     ON
      # AZ_PLATFORM_IMPL            AZ_PLATFORM_IMPL_POSIX / AZ_PLATFORM_IMPL_WIN32
      Linux_x64_with_samples:
        OSVmImage: 'ubuntu-18.04'
        vcpkg.deps: 'curl[ssl] paho-mqtt'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX'
      Win_x86_with_samples:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'curl[winssl] paho-mqtt'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=WIN32'
      Win_x64_with_samples:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'curl[winssl] paho-mqtt'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=WIN32'
      MacOS_x64_with_samples:
        OSVmImage: 'macOS-10.15'
        vcpkg.deps: 'curl[ssl] paho-mqtt'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX'

      # Build with sample dependencies and unit testing [curl for transport and cmocka]  - PRECONDITIONS ON
      # WARNINGS_AS_ERRORS          ON
      # TRANSPORT_CURL              ON
      # UNIT_TESTING                ON
      # UNIT_TESTING_MOCKS          OFF
      # TRANSPORT_PAHO              ON
      # PRECONDITIONS               ON
      # LOGGING                     ON
      # AZ_PLATFORM_IMPL            AZ_PLATFORM_IMPL_POSIX / AZ_PLATFORM_IMPL_WIN32
      Linux_x64_with_samples_and_unit_test:
        OSVmImage: 'ubuntu-18.04'
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DUNIT_TESTING=ON'
      Win_x86_with_samples_and_unit_test:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'curl[winssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=WIN32 -DUNIT_TESTING=ON'
      Win_x64_with_samples_and_unit_test:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'curl[winssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=WIN32 -DUNIT_TESTING=ON'
      MacOS_x64_with_samples_and_unit_test:
        OSVmImage: 'macOS-10.15'
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DUNIT_TESTING=ON'

      # Build with unit testing only. No samples [cmocka] - PRECONDITIONS ON
      # WARNINGS_AS_ERRORS          ON
      # TRANSPORT_CURL              OFF
      # UNIT_TESTING                ON
      # UNIT_TESTING_MOCKS          ON
      # TRANSPORT_PAHO              OFF
      # PRECONDITIONS               ON
      # LOGGING                     ON
      # AZ_PLATFORM_IMPL            AZ_PLATFORM_IMPL_NONE
      Linux_x64_with_unit_test:
        OSVmImage: 'ubuntu-18.04'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        # This is the only platform where we run mocking functions and generate CodeCoverage
        build.args: ' -DUNIT_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DUNIT_TESTING_MOCKS=ON'
        AZ_SDK_CODE_COV: 1
        AZ_SDK_C_NO_SAMPLES: 'true'
      Win_x86_with_unit_test:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DUNIT_TESTING=ON'
        AZ_SDK_C_NO_SAMPLES: 'true'
      Win_x64_with_unit_test:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DUNIT_TESTING=ON'
        AZ_SDK_C_NO_SAMPLES: 'true'
      MacOS_x64_with_unit_test:
        OSVmImage: 'macOS-10.15'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: ' -DUNIT_TESTING=ON'
        AZ_SDK_C_NO_SAMPLES: 'true'

      # Build with unit testing only. No samples [cmocka] - PRECONDITIONS OFF
      # WARNINGS_AS_ERRORS          ON
      # TRANSPORT_CURL              OFF
      # UNIT_TESTING                ON
      # UNIT_TESTING_MOCKS          OFF
      # TRANSPORT_PAHO              OFF
      # PRECONDITIONS               OFF
      # LOGGING                     ON
      # AZ_PLATFORM_IMPL            AZ_PLATFORM_IMPL_NONE
      Linux_x64_with_unit_test_no_preconditions:
        OSVmImage: 'ubuntu-18.04'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DUNIT_TESTING=ON -DPRECONDITIONS=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'
      Win_x86_with_unit_test_no_preconditions:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DUNIT_TESTING=ON -DPRECONDITIONS=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'
      Win_x64_with_unit_test_no_preconditions:
        OSVmImage: 'windows-2019'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DUNIT_TESTING=ON -DPRECONDITIONS=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'
      MacOS_x64_with_unit_test_no_preconditions:
        OSVmImage: 'macOS-10.15'
        vcpkg.deps: 'cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        build.args: ' -DUNIT_TESTING=ON -DPRECONDITIONS=OFF'
        AZ_SDK_C_NO_SAMPLES: 'true'

      # Build with no logging - samples - libcurl - paho - NoPreconditions
      # WARNINGS_AS_ERRORS          ON
      # TRANSPORT_CURL              ON
      # UNIT_TESTING                ON
      # UNIT_TESTING_MOCK_ENABLED   OFF
      # TRANSPORT_PAHO              ON
      # PRECONDITIONS               OFF
      # LOGGING                     OFF
      # AZ_PLATFORM_IMPL            AZ_PLATFORM_IMPL_POSIX
      Linux_x64_with_unit_tests_and_samples_no_logging_no_preconditions:
        OSVmImage: 'ubuntu-18.04'
        vcpkg.deps: 'curl[ssl] paho-mqtt cmocka'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DTRANSPORT_CURL=ON -DTRANSPORT_PAHO=ON -DAZ_PLATFORM_IMPL=POSIX -DUNIT_TESTING=ON -DPRECONDITIONS=OFF -DLOGGING=OFF'
  pool:
    vmImage: $(OSVmImage)
  variables:
    CMOCKA_XML_FILE: "%g-test-results.xml"
    CMOCKA_MESSAGE_OUTPUT: "xml"

  steps:
  - checkout: self
    submodules: recursive

  - template: /eng/pipelines/templates/steps/vcpkg.yml
    parameters:
      DependenciesVariableName: vcpkg.deps

  # Install gcovr and lcov for coverage information where appropriate
  - script: |
      sudo apt install -y gcovr lcov
      dotnet tool install -g dotnet-reportgenerator-globaltool
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
    displayName: Install coverage tools
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)

  - template: /eng/pipelines/templates/steps/cmake-build.yml
    parameters:
      BuildArgs: $(build.args)

  # Run unit tests
  - script: |
      ctest -V
    workingDirectory: build
    displayName: ctest

  # Publish test results to Azure Pipelines
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/*-test-results.xml'
      mergeTestResults: true
      testRunTitle: 'C99 - $(Agent.JobName)'
    condition: contains(variables['vcpkg.deps'], 'cmocka')

  # Make coverage targets (specified in coverage_targets.txt) and assemble
  # coverage report
  - bash: |
      make `cat coverage_targets.txt`
      ../tools/reportgenerator "-reports:sdk/*/*/*/*cov_xml.xml" "-targetdir:." "-reporttypes:Cobertura"
    workingDirectory: build
    displayName: Generate Code Coverage Data
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)

  - task: PublishCodeCoverageResults@1
    inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/**/Cobertura.xml'
    displayName: Publish Code Coverage to DevOps
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)

  - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@6
    displayName: Check line coverage
    inputs:
      checkCoverage: true
      coverageFailOption: fixed
      coverageType: line
      # 85% minimum line coverage
      coverageThreshold: 85
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)

  - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@6
    displayName: Check branch coverage
    inputs:
      checkCoverage: true
      coverageFailOption: fixed
      coverageType: branch
      # 60% minimum branch coverage
      coverageThreshold: 60
    condition: eq(variables['AZ_SDK_CODE_COV'], 1)

- job: GenerateReleaseArtifacts
  pool:
    vmImage: windows-2019
  steps:
    # Generate release-info
    - pwsh: >-
        New-Item
        -ItemType directory
        -Path $(Build.ArtifactStagingDirectory)
        -Name release-info
      displayName: Create package info artifact location

    - pwsh: |
        $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) release-info/package-info.json
        $version = eng/scripts/Get-SdkVersion.ps1
        $outputObject = @{ version = $version.ToString(); name = 'Azure SDK for Embedded C' } | ConvertTo-Json

        Set-Content -Path $outputPath -Value $outputObject

        # Set AZURE_SDK_VERSION for use in Doxygen generation
        Write-Host "##vso[task.setvariable variable=AZURE_SDK_VERSION]$version"
      displayName: Create package info JSON file

    - pwsh: >-
        Copy-Item
        sdk/docs/core/CHANGELOG.md
        (Join-Path $(Build.ArtifactStagingDirectory) release-info/CHANGELOG.md)
      displayName: Copy CHANGELOG.md to package artifact output

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: release-info
        path: $(Build.ArtifactStagingDirectory)/release-info

    # Update links
    - template: /eng/common/pipelines/templates/steps/replace-relative-links.yml
      parameters:
        TargetFolder: .
        RootFolder: .
        BuildSHA: $(Build.SourceVersion)
        RepoId: 'Azure/azure-sdk-for-c'

    # Generate Documentation
    - pwsh: |
        $setupFile="doxygen-1.8.18-setup.exe";

        Invoke-WebRequest `
          -MaximumRetryCount 10 `
          -Uri "https://azuresdktooling.blob.core.windows.net/dependencies/$setupFile" `
          -OutFile $setupFile `
        | Wait-Process;

        Start-Process -Filepath .\$setupFile -ArgumentList @("/VERYSILENT") -Wait
      workingDirectory: $(Agent.TempDirectory)
      displayName: Download and Install Doxygen

      # Assumes AZURE_SDK_VERSION is set in the environment
    - script: '"C:/Program Files/doxygen/bin/doxygen.exe" Doxyfile'
      displayName: Generate docs

    - pwsh: New-Item -ItemType directory -Path $(Build.ArtifactStagingDirectory) -Name docs
      displayName: Create doc artifact location

    - task: CopyFiles@2
      inputs:
        sourceFolder: docs/html
        targetFolder: $(Build.ArtifactStagingDirectory)/docs
      displayName: Copy documentation

    - pwsh: |
        $packageInfoPath = Join-Path -Path $(Build.ArtifactStagingDirectory) release-info/package-info.json
        Copy-Item -Path $packageInfoPath -Destination $(Join-Path -Path $(Build.ArtifactStagingDirectory) /docs/package-info.json)
      displayName: Copy package-info.json to documentation path

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: docs
        path: $(Build.ArtifactStagingDirectory)/docs
