parameters:
  - name: OSName
    type: string
    default: ''

steps:
- checkout: self
  submodules: recursive

# Expand the OS verification and DNS bypass steps
- task: PowerShell@2
  displayName: Verify agent OS
  inputs:
    pwsh: true
    workingDirectory: $(System.DefaultWorkingDirectory)
    filePath: eng/common/scripts/Verify-AgentOS.ps1
    arguments: >
      -AgentImage "${{ parameters.OSName }}"

# https://github.com/actions/virtual-environments/issues/798
- script: sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
  displayName: Bypass local DNS server to workaround issue resolving cognitiveservices names
  # Condition altered to skip bypassing local DNS for Ubuntu 16.04 where
  # bypassing causes failures in DevOps.
  condition: |
    and(
      succeededOrFailed(),
      contains(variables['OSVmImage'], 'ubuntu'),
      not(contains(variables['OSVmImage'], '16.04')),
      eq(variables['Container'], '')
      )

# Install apt dependencies (if appropriate)
- bash: sudo apt install -y $(AptDependencies)
  condition: ne(variables['AptDependencies'], '')
  displayName: Install dependencies from apt

- template: /eng/pipelines/templates/steps/vcpkg.yml

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
  displayName: Install coverage tools
  condition: eq(variables['AZ_SDK_CODE_COV'], 1)

- template: /eng/pipelines/templates/steps/cmake-build.yml
  parameters:
    BuildArgs: $(build.args)
    BuildType: $(BuildType)

# Run unit tests
- script: |
    ctest -V
  workingDirectory: build
  displayName: ctest

# Publish test results to Azure Pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*-test-results.xml'
    mergeTestResults: true
    testRunTitle: 'C99 - $(Agent.JobName)'
  condition: contains(variables['vcpkg.deps'], 'cmocka')

# Make coverage targets (specified in coverage_targets.txt) and assemble
# coverage report
- bash: |
    make `cat coverage_targets.txt`
    ../tools/reportgenerator "-reports:sdk/*/*/*/*cov_xml.xml" "-targetdir:." "-reporttypes:Cobertura"
  workingDirectory: build
  displayName: Generate Code Coverage Data
  condition: eq(variables['AZ_SDK_CODE_COV'], 1)

- task: PublishCodeCoverageResults@2
  inputs:
      summaryFileLocation: '$(Build.SourcesDirectory)/**/Cobertura.xml'
  displayName: Publish Code Coverage to DevOps
  condition: eq(variables['AZ_SDK_CODE_COV'], 1)

- task: CopyFiles@2
  inputs:
    contents: "**/*.map"
    targetFolder: $(Build.ArtifactStagingDirectory)
    flattenFolders: true
  condition: eq(variables['PublishMapFiles'], 'true')

- template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
  parameters:
    ArtifactName: map-files-$(MapFileArtifactSuffix)
    ArtifactPath: $(Build.ArtifactStagingDirectory)
    CustomCondition: eq(variables['PublishMapFiles'], 'true')
    SbomEnabled: false

- task: BuildQualityChecks@9
  displayName: Check line coverage
  inputs:
    checkCoverage: true
    coverageFailOption: fixed
    coverageType: line
    # 90% minimum line coverage
    coverageThreshold: 90
  condition: eq(variables['AZ_SDK_CODE_COV'], 1)

#  Disabling branch coverage check until newer tasks can support it see issue https://github.com/microsoft/azure-pipelines-tasks/issues/19669 tracking that request.
# - task: BuildQualityChecks@9
#   displayName: Check branch coverage
#   inputs:
#     checkCoverage: true
#     coverageFailOption: fixed
#     coverageType: branch
#     # 70% minimum branch coverage
#     coverageThreshold: 70
#   condition: eq(variables['AZ_SDK_CODE_COV'], 1)

# Validate all the files are saved as ASCII only without a UTF-8 BOM.
- bash: |
    # Run grep recursive excluding git folder and known expected files and save a file with results.
    grep -I -P -n "[^\x00-\x7F]" -r --exclude-dir ".git" --exclude-dir "vcpkg_installed" --exclude-dir "_deps" --exclude-dir "docs" --exclude-dir "eng" --exclude-dir "tools" --exclude "*CodeCoverage.cmake*" --exclude "grepResults" . > grepResults

    # Display results to console.
    cat grepResults

    # Each result will produce one line, count how many lines were found.
    files_with_non_ascii=($(wc -l < grepResults))

    # Show info about the total files that needs attention.
    echo Files found with non-ASCII characters: $files_with_non_ascii

    # Remove the grepResults file.
    rm grepResults

    # Return the count. When greater than 0, the step will fail.
    exit $files_with_non_ascii

  displayName: Validate Characters are ASCII
  condition: eq(variables['AZ_SDK_CODE_COV'], 1)

# Validate all the files are formatted correctly according to the .clang-format file.
- bash: |
    # Run clang-format-9 recursively on each source and header file within the repo.
    clang-format-9 --version
    find . \( -iname '*.h' -o -iname '*.c' \) -exec clang-format-9 -i {} \;

    git status --untracked-files=no --porcelain

    if [[ `git status --untracked-files=no --porcelain` ]]; then
      echo Some files were not formatted correctly according to the .clang-format file.
      echo Please run clang-format-9 to fix the issue by using this bash command at the root of the repo:
      echo "find . \( -iname '*.h' -o -iname '*.c' \) -exec clang-format-9 -i {} \;"
      exit 1
    fi

    echo Success, all files are formatted correctly according to the .clang-format file.
    exit 0

  displayName: Validate Clang Format
  condition: eq(variables['AZ_SDK_CODE_COV'], 1)

- pwsh: |
    $artifactName = "$(Agent.JobName)"
    $parts = $artifactName -split ' '
    if ($parts[1]) {
      $artifactName = $parts[1]
    }
    Write-Host "##vso[task.setvariable variable=BomArtifactName;]$artifactName"
  displayName: Set bom file artifact name

