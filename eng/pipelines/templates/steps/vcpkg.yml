parameters:
  # Use the variable name itself (no $() or other wrapping syntax). This is
  # because we use runtime and macro expressions for conditions and script
  # invocations
  DependenciesVariableName: vcpkg.deps

steps:
  - pwsh: Write-Host "##vso[task.setvariable variable=VcpkgRef;]$(Get-Content eng/vcpkg.ref.txt)"
    displayName: Set VcpkgRef

  - task: Cache@2
    inputs:
      key: >-
        $(Agent.JobName)
        | "$(VcpkgRef)"
        | $(Agent.Os)
        | $(${{ parameters.DependenciesVariableName }})
      path: $(Agent.TempDirectory)/vcpkg
      cacheHitVar: VcpkgRestoredFromCache
    displayName: Vcpkg Cache
    condition: >-
      and(
        succeeded(),
        not(eq(variables['${{ parameters.DependenciesVariableName }}'], '')),
        not(eq(variables['Skip.VcpkgCache'], 'true'))
      )

  - task: PowerShell@2
    inputs:
      targetType: filePath
      filePath: eng/scripts/vcpkg.ps1
      arguments: >-
        -Ref $(VcpkgRef)
        -Dependencies $(${{ parameters.DependenciesVariableName }})
        -TargetPath $(Agent.TempDirectory)/vcpkg
        -CI
      pwsh: true

    condition: >-
      and(
        succeeded(),
        not(eq(variables['${{ parameters.DependenciesVariableName }}'], '')),
        ne(variables['VcpkgRestoredFromCache'], true)
      )
